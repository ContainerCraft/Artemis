# helm repo add argo https://argoproj.github.io/argo-helm && helm repo update
# helm upgrade --install argocd argo/argo-cd --create-namespace --namespace argocd --values ./values.yaml
# kubectl port-forward svc/argocd-server -n argocd 8080:443

## Argo CD configuration
## Ref: https://github.com/argoproj/argo-cd
nameOverride: argocd
fullnameOverride: ""

## Ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles
createAggregateRoles: false
openshift:
  enabled: false
crds:
  install: true
global:
  revisionHistoryLimit: 3
  additionalLabels:
    app: argocd
  image:
    tag: ""
    repository: quay.io/argoproj/argocd
    imagePullPolicy: IfNotPresent
  logging:
    level: info
  podAnnotations: {}
  podLabels: {}
  networkPolicy:
    create: false
    defaultDenyIngress: false

## Argo Configs
## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
configs:
  cm:
    create: true
    annotations: {}
    url: "" # Argo CD's externally facing base URL. Required when configuring SSO
    application.instanceLabelKey: argocd.argoproj.io/instance
    server.rbac.log.enforce.enable: false
    exec.enabled: false ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/#exec-resource
    admin.enabled: true ## Ref: https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user
    timeout.reconciliation: 180s
    timeout.hard.reconciliation: 0
    # Dex configuration
    # dex.config: |
    #   connectors:
    #     # GitHub example
    #     - type: github
    #       id: github
    #       name: GitHub
    #       config:
    #         clientID: aabbccddeeff00112233
    #         clientSecret: $dex.github.clientSecret # Alternatively $<some_K8S_secret>:dex.github.clientSecret
    #         orgs:
    #         - name: your-github-org

  # Argo CD configuration parameters
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml
  params:
    annotations: {}
    server.basehref: /                  # -- Value for base href in index.html. Used if Argo CD is running behind reverse proxy under subpath different from /
    server.rootpath: ''                 # -- Used if Argo CD is running behind reverse proxy under subpath different from /
    server.disable.auth: false          # -- Disable Argo CD RBAC for user authentication
    server.enable.gzip: false           # -- Enable GZIP compression
    server.x.frame.options: sameorigin  # -- Set X-Frame-Options header in HTTP responses to value. To disable, set to "".

  # Provide external cluster credentials
  ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters
  ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/security/#external-cluster-credentials
  clusterCredentials: []
    # - name: mycluster
    #   server: https://mycluster.com
    #   labels: {}
    #   annotations: {}
    #   config:
    #     bearerToken: "<authentication token>"
    #     tlsClientConfig:
    #       insecure: false
    #       caData: "<base64 encoded certificate>"
    # - name: mycluster2
    #   server: https://mycluster2.com
    #   labels: {}
    #   annotations: {}
    #   namespaces: namespace1,namespace2
    #   clusterResources: true
    #   config:
    #     bearerToken: "<authentication token>"
    #     tlsClientConfig:
    #       insecure: false
    #       caData: "<base64 encoded certificate>"

## Application controller
controller:
  name: application-controller
  replicas: 1
  serviceAccount:
    create: true
    name: argocd-application-controller
    automountServiceAccountToken: true
    annotations: {}
    labels: {}
  ## Enable if you would like to grant rights to Argo CD to deploy to the local Kubernetes cluster.
  clusterAdminAccess:
    enabled: true

## Dex
dex:
  enabled: true
  name: dex-server
  # TLS certificate configuration via Secret
  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#configuring-tls-to-argocd-dex-server
  ## Note: Issuing certificates via cert-manager in not supported right now because it's not possible to restart Dex automatically without extra controllers.
  certificateSecret: # -- Create argocd-dex-server-tls secret
    enabled: false   # -- Labels to be added to argocd-dex-server-tls secret
    labels: {}       # -- Annotations to be added to argocd-dex-server-tls secret
    annotations: {}  # -- Certificate authority. Required for self-signed certificates.
    ca: ''           # -- Certificate private key
    key: ''          # -- Certificate data. Must contain SANs of Dex service (ie: argocd-dex-server, argocd-dex-server.argo-cd.svc)
    crt: ''
  serviceAccount:
    create: true
    name: argocd-dex-server
    automountServiceAccountToken: true
    annotations: {}

## Redis
redis:
  enabled: true
  name: redis

# External Redis parameters
externalRedis:
  host: ""
  port: 6379
  username: ""
  existingSecret: "" # -- The name of an existing secret with Redis credentials (must contain key `redis-password`).
  secretAnnotations: {}

## Server
server:
  name: server
  replicas: 1
  # TLS certificate configuration via cert-manager
  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-certificates-used-by-argocd-server
  certificate:
    enabled: false
    secretName: argocd-server-tls
    domain: argocd.example.com
    additionalHosts: []
    issuer:
      # -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`
      group: ""
      # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
      kind: ""
      # -- Certificate isser name. Eg. `letsencrypt`
      name: ""
    # Private key of the certificate
    privateKey:
      rotationPolicy: Never # -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`
  serviceAccount:
    create: true
    name: argocd-server
    labels: {}
    annotations: {}
    automountServiceAccountToken: true
  ingress:
    enabled: false
    ingressClassName: ""
    annotations: {}
    labels: {}
    https: false # -- Uses `server.service.servicePortHttps` instead `server.service.servicePortHttp`
    hosts:
      - argocd.example.com
    paths:
      - /
    pathType: Prefix
    tls:
      - secretName: your-certificate-name
        hosts:
          - argocd.example.com
  # gRPC Ingress
  # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/
  ingressGrpc:
    enabled: false
    ingressClassName: ""
    annotations: {}
    labels: {}
    https: false # -- Uses `server.service.servicePortHttps` instead `server.service.servicePortHttp`
    hosts:
      - argocd.example.com
    paths:
      - /
    pathType: Prefix
    tls:
      - secretName: your-certificate-name
        hosts:
          - argocd.example.com
  ## Enable if you would like to grant rights to Argo CD to deploy to the local Kubernetes cluster.
  clusterAdminAccess:
    enabled: true
  ## Argo UI extensions
  ## This function in tech preview stage, do expect unstability or breaking changes in newer versions.
  ## Ref: https://github.com/argoproj-labs/argocd-extensions
  extensions:
    enabled: false
    image:
      tag: "v0.1.0"
      repository: "ghcr.io/argoproj-labs/argocd-extensions"
      imagePullPolicy: IfNotPresent

## Repo Server
repoServer:
  name: repo-server
  replicas: 1
  clusterAdminAccess:
    enabled: false

## ApplicationSet controller
applicationSet:
  enabled: true
